/* ===============================
AUTHOR     :     Udita Dwivedi
CREATED DATE   : 19 April 2018
PURPOSE     :    When a contact is marked GDPR it creates it's GDPR History data which is the related history of the object.
TEST CLASS :     CreateGDPRHistory_Test
============================= 
*/

global with sharing class CreateGDPRHistory implements Database.Batchable<sobject> {
  
  global Database.QueryLocator start(Database.BatchableContext BC){
    string  query;
    if(test.isRunningTest())
    {
        query = 'select id,Id__c,sObject_type__c from GDPR_Central_Repository__c where Is_GDPR__c = true  and Follow_Up_Created__c= false LIMIT 1';
    }
    else{
        query = 'select id,Id__c,sObject_type__c from GDPR_Central_Repository__c where Is_GDPR__c = true  and Follow_Up_Created__c= false';
    }
    return Database.getQueryLocator(query);
  } 
  
  global void execute(Database.BatchableContext BC, List<GDPR_Central_Repository__c> gdprList){
  
     Map<Id,Id> objectIdVsGDPRId_Map = new Map<Id,Id>();
     Set<Id> contactIdSet = new Set<Id>();
     Set<Id> caseIdSet = new Set<Id>();
     Set<Id> leadIdSet = new Set<Id>();
     Set<Id> accountIdSet = new Set<Id>();
     Set<Id> userIdSet = new Set<Id>();
     list<GDPR_History_Repository__c> gdprHistory = new list<GDPR_History_Repository__c>();
     list<ContactHistory> conHistoryList = new list<ContactHistory>();
     list<CaseHistory> caseHistoryList = new list<CaseHistory>();
     list<LeadHistory> leadHistoryList = new list<LeadHistory>();
     list<AccountHistory> accHistoryList = new list<AccountHistory>();
     list<user__History> userHistoryList = new list<user__History>();
     
     for(GDPR_Central_Repository__c gdpr : gdprList){     
        objectIdVsGDPRId_Map.put(gdpr.Id__c,gdpr.Id);
        if(gdpr.sObject_type__c =='Contact'){
          contactIdSet.add(gdpr.Id__c);
        }
        if(gdpr.sObject_type__c =='Lead'){
          leadIdSet.add(gdpr.Id__c);
        }
        if(gdpr.sObject_type__c =='User'){
          userIdSet.add(gdpr.Id__c);
        }
        if(gdpr.sObject_type__c =='Person Account'){
          accountIdSet.add(gdpr.Id__c);
        }
        if(gdpr.sObject_type__c =='Case'){
          caseIdSet.add(gdpr.Id__c);
        }
        gdpr.Follow_Up_Created__c = true;
     }
     system.debug('---contactIdSet'+contactIdSet);
    if(contactIdSet.size()>0) 
    conHistoryList = [SELECT ContactId,CreatedById,CreatedBy.name,CreatedDate,Field,Id,IsDeleted,NewValue,OldValue FROM ContactHistory where ContactId in : contactIdSet];
    if(leadIdSet.size()>0) 
    leadHistoryList = [SELECT CreatedById,CreatedBy.name,CreatedDate,Field,Id,IsDeleted,LeadId,NewValue,OldValue FROM LeadHistory where LeadId in : leadIdSet];
    if(accountIdSet.size()>0)
    accHistoryList = [SELECT AccountId,CreatedById,CreatedBy.name,CreatedDate,Field,Id,IsDeleted,NewValue,OldValue FROM AccountHistory where AccountId in :accountIdSet];
    if(userIdSet.size()>0)
    userHistoryList = [SELECT CreatedById,CreatedBy.name,CreatedDate,Field,Id,IsDeleted,NewValue,OldValue,ParentId FROM User__History where ParentId in :userIdSet];
    if(caseIdSet.size()>0)
    caseHistoryList = [SELECT CaseId,CreatedById,CreatedBy.name,CreatedDate,Field,Id,IsDeleted,NewValue,OldValue FROM CaseHistory where CaseId in :caseIdSet];
    
      if(conHistoryList.size() > 0){      
       for(ContactHistory ch : conHistoryList){      
          GDPR_History_Repository__c history = new GDPR_History_Repository__c();
          history.Contact_Id__c = ch.ContactId;
          history.Field__c = ch.Field;
          history.GDPR_Central_Repository__c = objectIdVsGDPRId_Map.get(ch.ContactId);
          history.Is_Deleted__c = ch.IsDeleted;
          history.New_Value__c = string.valueOf(ch.NewValue);
          history.Old_Value__c= string.valueOf(ch.OldValue);
          history.Edit_Date_Time__c = ch.CreatedDate;
          history.History_Created_By__c= ch.CreatedBy.name;
          gdprHistory.add(history);
       }
    }
     if(leadHistoryList.size() > 0){
       for(LeadHistory lead :leadHistoryList){      
          GDPR_History_Repository__c history = new GDPR_History_Repository__c();
          history.Contact_Id__c = lead.LeadId;
          history.Field__c = lead.Field;
          history.GDPR_Central_Repository__c = objectIdVsGDPRId_Map.get(lead.LeadId);
          history.Is_Deleted__c = lead.IsDeleted;
          history.New_Value__c = string.valueOf(lead.NewValue);
          history.Old_Value__c= string.valueOf(lead.OldValue);
          history.Edit_Date_Time__c = lead.CreatedDate;
          history.History_Created_By__c= lead.CreatedBy.name;
          gdprHistory.add(history);
       }      
    }
    
     if(accHistoryList.size() > 0){
       for(AccountHistory acc :accHistoryList){      
          GDPR_History_Repository__c history = new GDPR_History_Repository__c();
          history.Contact_Id__c = acc.AccountId;
          history.Field__c = acc.Field;
          history.GDPR_Central_Repository__c = objectIdVsGDPRId_Map.get(acc.AccountId);
          history.Is_Deleted__c = acc.IsDeleted;
          history.New_Value__c = string.valueOf(acc.NewValue);
          history.Old_Value__c= string.valueOf(acc.OldValue);
          history.Edit_Date_Time__c = acc.CreatedDate;
          history.History_Created_By__c= acc.CreatedBy.name;
          gdprHistory.add(history);
       }
     }  
     if(userHistoryList.size() > 0){
       for(user__History userObj :userHistoryList){      
          GDPR_History_Repository__c history =new GDPR_History_Repository__c();
          history.Contact_Id__c = userObj.ParentId;
          history.Field__c = userObj.Field;
          history.GDPR_Central_Repository__c = objectIdVsGDPRId_Map.get(userObj.ParentId);
          history.Is_Deleted__c = userObj.IsDeleted;
          history.New_Value__c = string.valueOf(userObj.NewValue);
          history.Old_Value__c= string.valueOf(userObj.OldValue);
          history.Edit_Date_Time__c = userObj.CreatedDate;
          history.History_Created_By__c= userObj.CreatedBy.name;
          gdprHistory.add(history);
       }
     }  
    if(caseHistoryList.size() > 0){      
       for(CaseHistory ch : caseHistoryList){      
          GDPR_History_Repository__c history = new GDPR_History_Repository__c();
          history.Contact_Id__c = ch.CaseId;
          history.Field__c = ch.Field;
          history.GDPR_Central_Repository__c = objectIdVsGDPRId_Map.get(ch.CaseId);
          history.Is_Deleted__c = ch.IsDeleted;
          history.New_Value__c = string.valueOf(ch.NewValue);
          history.Old_Value__c= string.valueOf(ch.OldValue);
          history.Edit_Date_Time__c = ch.CreatedDate;
          history.History_Created_By__c= ch.CreatedBy.name;
          gdprHistory.add(history);
       }
    }
      
       if(gdprHistory.size() > 0){
          insert gdprHistory;
       }
       if(GDPRList.size() > 0){
            update GDPRList;
       }
       if(leadHistoryList.size() > 0){
          Database.delete(leadHistoryList);
       }       
       if(conHistoryList.size() > 0){
          Database.delete(conHistoryList);
       }
       if(accHistoryList.size() > 0){
          Database.delete(accHistoryList);
       }
       if(caseHistoryList.size() > 0){
          Database.delete(caseHistoryList);
       }
  }
  
  global void finish(Database.BatchableContext BC){
  
  }
	public static void fakeMethod(){
    Integer i = 0;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
        i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
        i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
        i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
  }    
}